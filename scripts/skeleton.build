<?xml version="1.0"?>
<project name="Skeletor" default="skeletor">

	<description>Generate a project skeleton</description>

	<!-- TODO: pull these in from command line properties -->
	<property name="project-name" value="My SuperAwesome Project"/>
	<property name="project-js-filename" value="my-superawesome-project"/>
	<property name="project-js-modulename" value="MySuperAwesomeProject"/>

	<property name="project-type" value="html5"/>

	<property name="fromdir" value="skeleton"/>
	<property name="todir" value="skeleton-tmp"/>


	<property name="ScriptsPath" value="${path::get-directory-name(project::get-buildfile-path())}"/>


	<target name="skeletor">
		<call target="retrieve-skeleton"/>
		<!--<call target="generate-templates"/>-->
	</target>

	
	<target name="retrieve-skeleton">

		<!-- TODO: grab latest skeleton templates from GitHub repo -->
		<!-- TODO: different repos for different project types? (i.e. proto, plain HTML, for Ektron, Require.js, Sass, etc.) -->

		<!--<get src="https://github.com/boomworks/ui-dev-skeleton/zipball/master" dest="${ScriptsPath}/ui-dev-skeleton.zip" usetimestamp="true" failonerror="true"/>-->

		<!-- TODO: notify user if get error? How about if up to date? How do we know? -->
		<!--<if test="${not file::exists(ScriptsPath + '/ui-dev-skeleton.zip')}">
			<fail message="Couldn't download the latest package from GitHub for some reason. Try again later"/>
		</if>-->

		<if test="${file::exists(ScriptsPath + '/ui-dev-skeleton.zip')}">

			<unzip zipfile="${ScriptsPath}/ui-dev-skeleton.zip"/>

			<foreach item="File" property="filename">

				<in>
					<items basedir="./">
						<include name="boomworks-ui-dev-skeleton-*/${project-type}/**/*" />
					</items>
				</in>

				<do>

					<property name="file.path" value="${path::get-directory-name(filename)}\"/>
					<property name="file.filename" value="${path::get-file-name(filename)}"/>
					<property name="file.toFilename" value="${string::replace(file.filename, '@PROJECT-NAME@', project-name)}"/>
					<property name="file.toFilename" value="${string::replace(file.toFilename, '@PROJECT-JS-FILENAME@', project-js-filename)}"/>
					<property name="file.toFilename" value="${string::replace(file.toFilename, '@PROJECT-MODULE-NAME@', project-js-modulename)}"/>

					<property name="zipball.path" value="${string::substring(file.path, string::get-length(ScriptsPath), 34)}"/>
					<property name="target.path" value="${string::replace(file.path, zipball.path, '')}"/>


					<echo>Copy to: ${target.path}${file.toFilename}</echo>

<!--
					<if test="${not file::exists(targetImage.path + '/' + image.filename)}">
						<delete file="${image.path}/${image.filename}"/>
					</if>
-->
				</do>
			</foreach>

<!--
			<move todir="${ScriptsPath}" flatten="true" overwrite="true">
				<fileset>
					<include name="boomworks-ui-dev-skeleton-*/scripts/*" />
				</fileset>
			</move>
-->
			<delete verbose="true">
				<fileset>
					<!--<include name="${ScriptsPath}/boomworks-ui-dev-skeleton-**" />-->
					<!--<include name="${ScriptsPath}/ui-dev-skeleton.zip" />-->
				</fileset>
			</delete>

		</if>

	</target>

	<target name="generate-templates">

		<!-- TODO: loop over files & replace tokens in file names -->

		<copy todir="${todir}">
			<fileset>
				<include name="${ScriptsPath}/boomworks-ui-dev-skeleton-**" />
			</fileset>
			<filterchain>
				<replacetokens>
					<token key="PROJECT-NAME" value="${project-name}" />
					<token key="PROJECT-JS-FILENAME" value="${project-js-filename}" />
					<token key="PROJECT-MODULE-NAME" value="${project-js-modulename}" />
				</replacetokens>
			</filterchain>
		</copy>

	</target>

  
</project>

