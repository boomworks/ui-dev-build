<?xml version="1.0"?>
<!-- 
TODO:
- Make lists of JS/CSS/etc. files configurable
- Wiki page with instructions, point to it on path fails
-->
<project>

	<!-- Include machine specific properties -->
	<property name="LocalSettingsFile" value="${environment::get-folder-path('LocalApplicationData')}\.nant\local-settings.include"/>

	<if test="${not file::exists(LocalSettingsFile)}">
		<fail message="You need a local settings file in ${LocalSettingsFile}"/>
	</if>

	<include buildfile="${LocalSettingsFile}"/>
	<if test="${file::exists(ScriptsPath + '/local-project-settings.include')}">
		<include buildfile="local-project-settings.include"/>
	</if>
	
	<target name="check-dependency">
		<if test="${not property::exists(dependency-path-property) or not file::exists(property::get-value(dependency-path-property))}">
			<fail message="You need to install ${dependency-name} &amp; add/update the ${dependency-path-property} property in ${LocalSettingsFile}"/>
		</if>
	</target>


	<property name="dependency-name" value="NAnt Contrib"/>
	<property name="dependency-path-property" value="NAntContribPath"/>
	<call target="check-dependency" />

	<loadtasks assembly="${NAntContribPath}" />

	<property name="AppPrefix" value="${string::to-lower(string::replace(project::get-name(), ' ', '-'))}" unless="${property::exists('AppPrefix')}"/>

	<property name="now" value="${datetime::now()}"/>
	<!--<property name="Timestamp" value="${datetime::get-year(now)}${datetime::get-month(now)}${datetime::get-day(now)}${datetime::get-hour(now)}${datetime::get-minute(now)}${datetime::get-second(now)}"/>-->
	<tstamp property="Timestamp" pattern="yyyyMMddHHmmss"/>

	<property name="SrcPath" value="src/"/>
	<property name="imagesPath" value="${SrcPath}images/"/>
	<property name="SCSSPath" value="${SrcPath}scss"/>
	<property name="CSSPath" value="${SrcPath}css"/>
	<property name="JSPath" value="${SrcPath}js"/>

	<property name="DistPath" value="dist/${Timestamp}/"/>
	<property name="imagesDistPath" value="${DistPath}images/"/>
	<property name="CSSDistPath" value="${DistPath}css"/>
	<property name="JSDistPath" value="${DistPath}js"/>

	<property name="JSConcattedFileName" value="${AppPrefix}-${Timestamp}.js"/>
	<property name="JSFilesTemplate" value="&lt;script src=&quot;js/{AppPrefix}-{Timestamp}.min.js&quot;&gt;&lt;/script&gt;"/>

	<property name="DistZipPath" value="dist/${Timestamp}_${AppPrefix}_delivery.zip"/>
	<property name="DistGZipPath" value="dist/${Timestamp}_${AppPrefix}_delivery.tar.gz"/>
	<property name="DistBZipPath" value="dist/${Timestamp}_${AppPrefix}_delivery.tar.bz2"/>

	<target name="cleanup-temp-files">
		<delete file="${SrcPath}building" />
		<delete file="${SrcPath}css-files" />
		<delete file="${SrcPath}js-files" />
	</target>

	<target name="zip-dist-files">
		<zip zipfile="${DistZipPath}">
			<fileset basedir="${DistPath}">
				<include name="**/*" />
			</fileset>
		</zip>	
	</target>

	<target name="gzip-dist-files">
		<tar destfile="${DistGZipPath}" compression="GZip">
			<fileset basedir="${DistPath}">
				<include name="**/*" />
			</fileset>
		</tar>	
	</target>

	<target name="bzip-dist-files">
		<tar destfile="${DistBZipPath}" compression="BZip2">
			<fileset basedir="${DistPath}">
				<include name="**/*" />
			</fileset>
		</tar>	
	</target>

	<target name="java-exists">
		<property name="dependency-name" value="Java"/>
		<property name="dependency-path-property" value="JavaPath"/>
		<call target="check-dependency" />
	</target>

	<target name="lint-js">
		<property name="dependency-name" value="JavaScript Lint"/>
		<property name="dependency-path-property" value="JavaScriptLintPath"/>
		<call target="check-dependency" />

		<if test="${property::exists('JSLintFiles')}">
			<foreach item="String" in="${JSLintFiles}" delim=" " property="filename">
				<property name="filename" value="${JSDistPath}/${filename}"/>
				<exec basedir="." program="${JavaScriptLintPath}" commandline=" -nologo -conf &quot;${ScriptsPath}/jsl.conf&quot; -process &quot;${filename}&quot;" failonerror="true" />
			</foreach>
		</if>

	</target>

	<target name="concatenate-js">

		<foreach item="String" in="${JSConcatFiles}" delim=" " property="filename">
			<concat destfile="${JSDistPath}/${JSConcattedFileName}" append="true">
				<fileset>
					<include name="${JSDistPath}/${filename}"/>
				</fileset>
			</concat>
		</foreach>

		<echo file="${SrcPath}js-files" append="true">${string::replace(string::replace(JSFilesTemplate, '{Timestamp}', Timestamp), '{AppPrefix}', AppPrefix)}</echo>

	</target>

	<target name="compress-js">

		<call target="java-exists"/>
		<property name="dependency-name" value="Closure Compiler"/>
		<property name="dependency-path-property" value="ClosureCompilerPath"/>
		<call target="check-dependency" />

		<!-- Assume we're concatting & only compress the resulting file -->
		<if test="${property::exists('JSConcatFiles')}">
			<property name="filename" value="${JSDistPath}/${JSConcattedFileName}"/>
			<exec basedir="." program="${JavaPath}" commandline=" -jar &quot;${ClosureCompilerPath}&quot; --compilation_level SIMPLE_OPTIMIZATIONS --js &quot;${filename}&quot; --js_output_file &quot;${string::replace(filename, '.js', '.min.js')}&quot;" failonerror="true" />
		</if>

		<!-- otherwise compress everything in JS directory -->
		<if test="true" unless="${property::exists('JSConcatFiles')}">
			<foreach item="File" property="filename">
				<in>
					<items basedir="${JSDistPath}">
						<include name="**/*.js" />
					</items>
				</in>
				<do>
					<exec basedir="." program="${JavaPath}" commandline=" -jar &quot;${ClosureCompilerPath}&quot; --js &quot;${filename}&quot; --js_output_file &quot;${string::replace(filename, '.js', '.min.js')}&quot;" failonerror="true" />
				</do>
			</foreach>
		</if>
	</target>

	<target name="compress-css">

		<call target="java-exists"/>
		<property name="dependency-name" value="YUI Compressor"/>
		<property name="dependency-path-property" value="YUICompressorPath"/>
		<call target="check-dependency" />

		<foreach item="File" property="filename">
		  <in>
			<items basedir="${CSSDistPath}">
				<include name="/**/*.css" />
			</items>
		  </in>
		  <do>
			  <exec basedir="." program="${JavaPath}" commandline=" -jar &quot;${YUICompressorPath}&quot; --type css --charset utf-8 -o &quot;${CSSDistPath}/${path::get-file-name(filename)}&quot; &quot;${filename}&quot;" failonerror="true" />
		  </do>
		</foreach>
	</target>

	<target name="optimise-images">

		<!-- PNG -->
		<property name="dependency-name" value="PNG Crush"/>
		<property name="dependency-path-property" value="PNGCrushPath"/>
		<call target="check-dependency" />

		<foreach item="File" property="filename">
			<in>
				<items basedir="${imagesDistPath}">
					<include name="**/*.png" />
				</items>
			</in>
			<do>
				<!--<exec basedir="." program="${PNGCrushPath}" commandline=" -d ${imagesDistPath}opt -brute &quot;${filename}&quot;" failonerror="false" />-->
				<exec basedir="." program="${PNGCrushPath}" commandline="-q  -brute -e -optimised.png &quot;${filename}&quot; &quot;${filename}&quot;" failonerror="false" />
			</do>
		</foreach>

		<!-- JPEG -->
		<property name="dependency-name" value="JPEG Tran"/>
		<property name="dependency-path-property" value="JPEGTranPath"/>
		<call target="check-dependency" />

		<foreach item="File" property="filename">
			<in>
				<items basedir="${imagesDistPath}">
					<include name="**/*.jp*g" />
				</items>
			</in>
			<do>
				<exec basedir="." program="${JPEGTranPath}" commandline=" -copy none -optimise -outfile &quot;${filename}&quot; &quot;${filename}&quot;" failonerror="false" />
			</do>
		</foreach>

		<!-- GIF -->
		<property name="dependency-name" value="gifsicle"/>
		<property name="dependency-path-property" value="GifsiclePath"/>
		<call target="check-dependency" />

		<foreach item="File" property="filename">
			<in>
				<items basedir="${imagesDistPath}">
					<include name="**/*.gif" />
				</items>
			</in>
			<do>
				<exec basedir="." program="${GifsiclePath}" commandline=" --batch -O3 &quot;${filename}&quot;" failonerror="false"/>
			</do>
		</foreach>

		<!-- Replace images with their optimised versions -->
		<foreach item="File" property="filename">
			<in>
				<items basedir="${imagesDistPath}">
					<include name="**/*-optimised.png" />
				</items>
			</in>
			<do>
				<move file="${filename}" tofile="${string::replace(filename, '-optimised.png', '.png')}"/>
			</do>
		</foreach>

	</target>

	<target name="sass-update">
		<property name="dependency-name" value="SASS"/>
		<property name="dependency-path-property" value="SASSPath"/>
		<call target="check-dependency" />

		<echo>Updating SCSS files in ${SCSSPath}...</echo>
		<echo>${SASSPath} -f --update ${SCSSPath}:${CSSPath}</echo>
		<exec basedir="." program="${SASSPath}" commandline=" -f --update ${SCSSPath}:${CSSPath}" failonerror="true" />
	</target>

	<target name="sass-watch">
		<property name="dependency-name" value="SASS"/>
		<property name="dependency-path-property" value="SASSPath"/>
		<call target="check-dependency" />

		<echo>Watching SCSS files in ${SCSSPath}...</echo>
		<exec basedir="." program="${SASSPath}" commandline=" -g --watch ${SCSSPath}:${CSSPath}" failonerror="true" verbose="true" />
	</target>

</project>
